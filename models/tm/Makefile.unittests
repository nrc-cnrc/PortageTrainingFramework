#!/usr/bin/make -f
# vim:noet:ts=3:nowrap
#
# @author Samuel Larkin
# @file Makefile
# @brief  Unittests for the translation module.
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2008, 2012, 2015, Sa Majeste la Reine du Chef du Canada
# Copyright 2008, 2012, 2015, Her Majesty in Right of Canada


.PHONY:  ibm  wal  jpt  sig  prep
prep:
	${MAKE} -C ../../corpora all &> /dev/null
	${MAKE} -C ../ibm clean &> /dev/null
	${MAKE} -C ../wal clean &> /dev/null
	${MAKE} -C ../jpt clean &> /dev/null
	${MAKE} -C ../sig clean &> /dev/null

ibm:  prep
wal: ibm
jpt: wal
sig: jpt
ibm wal jpt sig:
	${MAKE} -C ../$@ all



################################################################################
# The test target is designed to be a unittest.  Its purpose is not to run
# commands but rather validate that all variables are properly expanded and
# that the resulting dependencies are all correct.
.PHONY: testsuite
testsuite:  unittest1
testsuite:  unittest2
#testsuite:  unittest3
testsuite:  unittest4
#testsuite:  unittest5
testsuite:  unittest6
testsuite:  unittest7
testsuite:  unittest8
testsuite:  unittest9
testsuite:  unittest10
testsuite:  unittest11


# WARNING This target must be written like so not as dependencies.
.PHONY:  dailybuild
dailybuild:
	#${MAKE}  unittest0
	${MAKE}  sigprune
	#${MAKE}  zn-adapt
	${MAKE}  unittest7
	${MAKE}  multiple_TMs
	${MAKE}  indicator1
	${MAKE}  indicator2
	${MAKE}  mixture




# These unittests look for clues that make was able to generate all
# dependencies.  Does not execute commands nor build models.
UNITTEST0_FILTER = egrep -o '($(call merge,|,$1))\b' | sort | uniq -c | sed -e 's/^ *//' | cut -f 1 -d ' ' | tr '\n' ' '
.PHONY: unittest0
unittest0: unittest_cpts
unittest0: unittest_merged_cpt
unittest0: unittest_mix_cpt
unittest0: unittest_indicator_cpt

# 5  align-words
# 10 cat.sh
# 5  gen-jpt-parallel.sh
# 5  joint2cond_phrase_tables
# 2  mgiza
unittest_cpts: export MERGED_CPT_JPT_TYPES = IBM2 HMM3 IBM4 HMM2 HMM1 
unittest_cpts: export TRAIN_TM := tm-train
unittest_cpts: export PT_TYPES := ibm2_cpt ibm4_cpt hmm1_cpt hmm2_cpt hmm3_cpt
unittest_cpts:
	${MAKE} -Bt jpt
	[[ "`${MAKE} -Bn all | $(call UNITTEST0_FILTER, align-words cat.sh gen-jpt-parallel.sh joint2cond_phrase_tables mgiza)`" =~ "5 10 5 5 2" ]]

# 2 align-words
# 6 cat.sh
# 2 gen-jpt-parallel.sh
# 1 joint2cond_phrase_tables
unittest_merged_cpt:  export MERGED_CPT_ZN_MODEL = HMM3
unittest_merged_cpt:  export MERGED_CPT_JPT_TYPES = IBM2 HMM3
unittest_merged_cpt:  export PT_TYPES := merged_cpt
unittest_merged_cpt:
	${MAKE} -Bt jpt
	[[ "`${MAKE} -Bn merged_cpt | $(call UNITTEST0_FILTER, align-words cat.sh gen-jpt-parallel.sh joint2cond_phrase_tables)`" =~ "2 6 2 1" ]]

# 8  align-words
# 18 cat.sh
# 8  gen-jpt-parallel.sh
# 4  merge_counts
# 1  train_tm_mixture
unittest_mix_cpt:  export MIXTM=sublm1 sublm2 sublm3
unittest_mix_cpt:  export PT_TYPES=mix_cpt
unittest_mix_cpt:  export MERGED_CPT_ZN_MODEL = HMM3
unittest_mix_cpt:  export MERGED_CPT_JPT_TYPES = IBM2 HMM3
unittest_mix_cpt:
	${MAKE} -Bt jpt
	mkdir -p mixtm && [[ "`${MAKE} -Bn all | $(call UNITTEST0_FILTER, align-words cat.sh gen-jpt-parallel.sh merge_multi_column_counts train_tm_mixture)`" =~ "8 18 8 4 1" ]]

# 3 align-words
# 6 cat.sh
# 3 gen-jpt-parallel.sh
# 1 joint2multi_cpt
# 3 ln
# 2 mgiza
unittest_indicator_cpt:  export INDICATOR_WORD_ALIGNMENT_MODELS = ${IBM4_MODEL_PFX} ${HMM3_MODEL_PFX} ${IBM2_MODEL_PFX}
unittest_indicator_cpt:  export PT_TYPES := indicator_cpt
unittest_indicator_cpt:
	${MAKE} -Bt jpt
	[[ "`${MAKE} -Bn all | $(call UNITTEST0_FILTER, gen-jpt-parallel.sh joint2multi_cpt cat.sh align-words mgiza ln)`" =~ "3 6 3 1 3 2" ]]





# Verify that make is capable of generating all required targets for merged_cpt and some other cpt.
.PHONY: unittest1
unittest1: SHELL=${LOCAL_SHELL}
unittest1:  export PT_TYPES := ibm2_cpt hmm3_cpt merged_cpt
unittest1:  export MERGED_CPT_JPT_TYPES := IBM2 HMM1 HMM3 HMM2 IBM1
unittest1:  export MERGED_CPT_ZN_MODEL := IBM1
unittest1:  | sig
	${MAKE} -Bnj1 tppt

# Verify that make is capable of generating all required target for one cpt that has been significance pruned.
.PHONY: unittest2
unittest2: SHELL=${LOCAL_SHELL}
unittest2:  export USE_SIGPRUNING := 1
unittest2:  export SIG_OPTS := -keep -sigopts '-par-driver fork'
unittest2:  | sig
	${MAKE} -Bnj1 ibm2_cpt

# Verify that make is capable of generating all required target for a merged cpt that has been significance pruned.
.PHONY: unittest3
unittest3: SHELL=${LOCAL_SHELL}
unittest3:  export USE_SIGPRUNING := 1
unittest3:  export SIG_OPTS := -keep -sigopts '-par-driver fork'
unittest3:  | sig
	${MAKE} -Bnj1 merged_cpt


#$(foreach a, a b, $(eval %.$a: ;echo $$@ $$*))


# UNITTEST for ZN-ADAPT.
.PHONY: unittest4 zn-adapt
unittest4:  zn-adapt
zn-adapt: export domain_files := tm-train_en.lc.gz tm-train_fr.lc.gz
zn-adapt: export other_files := sublm1_en.lc.gz sublm1_fr.lc.gz sublm2_en.lc.gz sublm2_fr.lc.gz sublm3_en.lc.gz sublm3_fr.lc.gz
zn-adapt:  | sig
	${MAKE} -f Makefile.zn-adapt all


# UNITTEST for Significance Pruning.
.PHONY: unittest5 sigprune
unittest5:  sigprune
sigprune:  export USE_SIGPRUNING := 1
sigprune: | sig
	${MAKE} clean.cpts
	${MAKE} all
	[[ "`find ../sig -name sig.\*.merged.tm-train.\*.gz -size +21c | \wc -l`" -eq 1 ]] \
	|| ! echo "ERROR: Seems that no sig counts were produced." >&2


# Create a significance pruned conditional phrase table from IBM4 joint
# counts.
.PHONY: unittest6
unittest6:  export USE_SIGPRUNING := 1
unittest6:  export PT_TYPES := ibm4_cpt
unittest6:  | sig
	${MAKE} ibm4_cpt
	@[[ "`find ../ibm -name ibm4.tm-train.\*_given_\*.gz -size +21c | \wc -l`" -eq 2 ]] \
	|| ! echo "ERROR: Can't find word alignment files for ibm4." >&2
	@[[ "`find ../jpt -name jpt.ibm4.tm-train.en-fr.gz -size +21c | \wc -l`" -eq 1 ]] \
	|| ! echo "ERROR: can't find a jpt for ibm4." >&2
	@[[ "`find -name cpt.ibm4-kn3-zn.tm-train.en2fr.gz -size +21c | \wc -l`" -eq 1 ]] \
	|| ! echo "ERROR: can't find a jpt for ibm4." >&2


# Create a significance pruned conditional phrase table built with a lexical
# smoother based on ibm4 with joint frequency counts tallied from IBM2, HMM3 &
# IBM4.
.PHONY: unittest7
unittest7:  export USE_SIGPRUNING := 1
unittest7:  export MERGED_CPT_ZN_MODEL := IBM4
unittest7:  export MERGED_CPT_JPT_TYPES := IBM2 HMM3 IBM4
unittest7:  export PT_TYPES := merged_cpt
unittest7:  |  sig
	${MAKE} clean.cpts
	${MAKE} merged_cpt
	@[[ "`find -name cpt.merged.ibm4-kn3-zn.tm-train.en2fr.gz -size +21c | \wc -l`" -eq 1 ]] \
	|| ! echo "ERROR: can't find conditional phrase table for ibm4." >&2


# Create multiple TMs.
.PHONY: unittest8 multiple_TMs
unittest8:  multiple_TMs
multiple_TMs:  export TRAIN_TM := sublm1 sublm2 sublm3
multiple_TMs:  | sig
	${MAKE} all


# Indicator Feature from one corpus.
.PHONY: unittest9 indicator1
unittest9:  indicator1
indicator1:  export MERGED_CPT_JPT_TYPES := IBM4 HMM3 IBM2
indicator1:  export PT_TYPES := indicator_cpt
indicator1:  | sig
	${RM} ${INDICATOR_MODEL_PFX}.${L1_2_L2X}
	${MAKE} indicator_cpt
	@[[ "`find -name ${INDICATOR_MODEL_PFX}.${L1_2_L2X} -size +21c | \wc -l`" -eq 1 ]] \
	|| ! echo "ERROR: can't find cpt with indicator_cpt" >&2
	@zcat ${INDICATOR_MODEL_PFX}.${L1_2_L2X} | grep -Em1 '( (1|0\.3)){3}$$' --quiet \
	|| ! echo "ERROR: Looks like there are no indicator_cpt feature in your cpt." >&2

# Inidcator Feature using several corpora.
.PHONY: unittest10 indicator2
unittest10:  indicator2
indicator2:  export TRAIN_TM := tm-train sublm1 sublm2 sublm3
indicator2:  export MERGED_CPT_JPT_TYPES := IBM4 HMM3 IBM2
indicator2:  export PT_TYPES := indicator_cpt
indicator2:  | sig
	${RM} ${INDICATOR_MODEL_PFX}.${L1_2_L2X}
	${MAKE} indicator_cpt
	@[[ "`find ../ibm -name ${${MERGED_CPT_ZN_MODEL}_MODEL_PFX}.${L2_GIVEN_L1X} -size +21c | \wc -l`" -eq 1 ]] \
	|| ! echo "ERROR: Can't find global word alignment model." >&2
	@[[ "`find -name ${INDICATOR_MODEL_PFX}.${L1_2_L2X} -size +21c | \wc -l`" -eq 1 ]] \
	|| ! echo "ERROR: can't find cpt with indicator_cpt" >&2
	@zcat ${INDICATOR_MODEL_PFX}.${L1_2_L2X} | grep -Em1 '( (1|0\.3)){3}$$' --quiet \
	|| ! echo "ERROR: Looks like there are no indicator_cpt feature in your cpt." >&2


# MIXTURE TRANSLATION MODEL
.PHONY: unittest11 mixture
unittest11:  mixture
mixture:  export MIXTM := sublm1 sublm2 sublm3
mixture:  | sig
	${MAKE} mix_cpt
	@[[ "`find -name cpt.mix.en2fr.gz -size +21c -type l | \wc -l`" -eq 1 ]] \
	|| ! echo "ERROR: Can't find the mixture translation model." >&2


# MIXTM with IBM4
.PHONY:  mixtm_ibm4
mixtm_ibm4:  export PT_TYPES := mix_cpt
mixtm_ibm4:  export MIXTM := sublm1 sublm2
mixtm_ibm4:  export MIXTM_TRAIN_MIX := sublm1
mixtm_ibm4:  export TUNE_MIXTM := dev2
mixtm_ibm4:  export MERGED_CPT_ZN_MODEL := IBM4
mixtm_ibm4:  export MERGED_CPT_JPT_TYPES := IBM4 HMM3
mixtm_ibm4:  | sig
	${MAKE} all


# MIXTM with IBM4 but using 1wam.
.PHONY: mixtm_ibm4_1wam
mixtm_ibm4_1wam:  export MIXTM_USE_GLOBAL_WORD_ALIGNMENT_MODEL := 1
mixtm_ibm4_1wam:  mixtm_ibm4
mixtm_ibm4_1wam:  |  sig

