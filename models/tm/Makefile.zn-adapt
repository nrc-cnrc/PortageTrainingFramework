#!/usr/bin/make -f
# vim:noet:ts=3:nowrap:encoding=utf-8
# $Id$

# @file Makefile
# @brief What are the dependencies to train a zn-adapted conditional phrase table.
#
# @author Samuel Larkin, Darlene Stewart
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2010, Sa Majeste la Reine du Chef du Canada /
# Copyright 2010, Her Majesty in Right of Canada


# Mandatory include: master config file.
include ../../Makefile.params

include Makefile.toolkit

# Lastly include the master toolkit
include ../../Makefile.toolkit

# Include the config file.
MAKEFILE_PARAMS ?= Makefile.params
-include ${MAKEFILE_PARAMS}

# What is this module's name.
MODULE_NAME ?= tm

# Where are located the corpora files.
CORPORA_DIR ?= ../../corpora



########################################
# Prefix for corpora

# This is a system of prefixes to automatically populate a list of in-domain
# file pairs and a list of other file pairs.
TRAIN_TM        ?= train
TRAIN_TM_BASE   ?= $(TRAIN_TM:-all=)

# This variable will be used in the filename of intermediate files that use
# both in-domain + other material.  This doesn't describe corpora file prefix.
TRAIN_TM_ALL    ?= $(TRAIN_TM_BASE:=-all)

# File prefix for in-domain file pairs.
# If simply setting a prefix to define all your in-domain file pairs isn't
# enough to automatically pick up all the appropriate file pairs, define
# domain_files instead with all your corpora file pairs.
TRAIN_TM_DOMAIN ?= $(TRAIN_TM_BASE:=-domain)

ifneq ($(words ${TRAIN_TM_DOMAIN}), 1)
$(error TRAIN_TM_DOMAIN can only be one prefix <${TRAIN_TM_DOMAIN}>)
endif

# File prefix for file pairs that are not part of the in-domain aka other.
# If simply setting a prefix to define all your other file pairs isn't enough
# to automatically pick up all the appropriate file pairs, define other_files
# instead with all your corpora file pairs.
TRAIN_TM_OTHER  ?= $(TRAIN_TM_BASE:=-other)

ifneq ($(words ${TRAIN_TM_OTHER}), 1)
$(error TRAIN_TM_OTHER can only be one prefix <${TRAIN_TM_OTHER}>)
endif

# NOTE:
# If you want your corpora in TRAIN_TM_DOMAIN & TRAIN_TM_OTHER to be
# preprocessed automatically, you should define in the master Makefile.params 
# TRAIN_LM := ${TRAIN_TM_DOMAIN} ${TRAIN_TM_OTHER}
# TRAIN_LM == <all prefixes that were set in TRAIN_TM_DOMAIN & TRAIN_TM_OTHER>



########################################
# List of file pairs.

# List of all the file pairs that are in-domain. 
tmp_domain_files := $(notdir $(wildcard ${CORPORA_DIR}/${TRAIN_TM_DOMAIN}*${LANGXZ}))
domain_files     ?= ${tmp_domain_files}

# List of all the file pairs that are not in-domain aka other.
tmp_other_files  := $(notdir $(wildcard ${CORPORA_DIR}/${TRAIN_TM_OTHER}*${LANGXZ}))
other_files      ?= ${tmp_other_files}



########################################
# Visualization of zn-adapt (in UTF-8)
# 
#                  IBM1(in-domain+other)
#             ╭──────────────┴────────────╮
#             ▼                           ▼
#    HMM(in-domain+other)         IBM2(in-domain+other)
#       ╭─────┴────────╮             ╭──────┴───────╮
#       ▼              ▼             ▼              ▼
# JPT(in-domain)  JPT(other)   JPT(in-domain)  JPT(other)
#        ╰──────────╮  ╰───╮  ╭─────╯  ╭──────────╯
#                   ▼      ▼  ▼        ▼
#                CPT(HMM(in-domain+other))
#                           ▲
#                           ┃
#                    HMM(in-domain)
#                           ▲
#                           ┃
#                    IBM1(in-domain)
#
# in-domain := domain_files
# other     := other_files



ifeq ("","$(or $(findstring clean,${MAKECMDGOALS}),$(findstring help,${MAKECMDGOALS}))")

ifeq ("${domain_files}", "")
$(error Make couldn't find the domain corpora files: ${domain_files})
endif

ifeq ("${other_files}", "")
$(error Make couldn't find the non-domain corpora files: ${other_files})
endif

endif


# Let make know where to find the corpora files.
vpath %${LANGXZ} ${CORPORA_DIR}

.DEFAULT_GOAL := help
.DELETE_ON_ERROR:
.SUFFIXES:
.SECONDARY:


# The CPTs that need to be built/
CPT_LIST = ${CPT_MODEL_PFX}.zn-adapt.${L1_2_L2X}
# If you need to generate a conditional phrase table in the other direction aka TGT to SRC.
#CPT_LIST += ${CPT_MODEL_PFX}.zn-adapt.${L2_2_L1X}


.PHONY: all
all: SHELL=${GUARD_SHELL}
all: zn-adapt

.PHONY: zn-adapt
zn-adapt: SHELL=${GUARD_SHELL}
zn-adapt: ${CPT_LIST}


# Train word alignment models on in domain data.
${IBM1_MODEL_PFX}.${TRAIN_TM_DOMAIN}%: IBM1_MODEL_CPUS = 1
${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}%: HMM3_MODEL_CPUS = 1

${IBM1_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L2_GIVEN_L1X}: ${domain_files}
${IBM1_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L1_GIVEN_L2X}: ${domain_files}

${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L2_GIVEN_L1X}: ${domain_files}
${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L1_GIVEN_L2X}: ${domain_files}


# Train word alignment models on all data.
${IBM1_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X}: ${domain_files} ${other_files}
${IBM1_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}: ${domain_files} ${other_files}

${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X}: ${domain_files} ${other_files}
${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}: ${domain_files} ${other_files}

${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X}: ${domain_files} ${other_files}
${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}: ${domain_files} ${other_files}


# Create the word alignment file for all corpus pairs.
#
STEM = $(sort $(subst _en.lc.gz,,$(subst _fr.lc.gz,,$1)))
$(info other_files & domain_files: ${other_files} ${domain_files})
$(info STEM: $(call STEM, ${other_files} ${domain_files}))

$(addsuffix .${HMM3_MODEL_PFX}.${L1_2_L2}.align.gz, $(call STEM, ${domain_files} ${other_files})):  ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X}  ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
$(addsuffix .${IBM2_MODEL_PFX}.${L1_2_L2}.align.gz, $(call STEM, ${domain_files} ${other_files})):  ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X}  ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
$(foreach c, $(call STEM, ${other_files} ${domain_files}), \
   $(eval $c.${HMM3_MODEL_PFX}.${L1_2_L2}.align.gz:  ${c}_en.lc.gz  ${c}_fr.lc.gz) \
   $(eval $c.${IBM2_MODEL_PFX}.${L1_2_L2}.align.gz:  ${c}_en.lc.gz  ${c}_fr.lc.gz) \
)


# Create joint frequency counts.
# Extract phrase alignment using HMM3 models.
JPT_HMM3_MODEL_PFX := ${JPT_MODEL_PFX}.${HMM3_MODEL_PFX}
${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X} ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: $(addsuffix .${HMM3_MODEL_PFX}.${L1_2_L2}.align.gz, $(call STEM, ${domain_files}))
${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: ${domain_files}

${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X} ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: $(addsuffix .${HMM3_MODEL_PFX}.${L1_2_L2}.align.gz, $(call STEM, ${other_files}))
${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: ${other_files}


# Extract phrase alignment using IBM2 models.
JPT_IBM2_MODEL_PFX := ${JPT_MODEL_PFX}.${IBM2_MODEL_PFX}
${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X} ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: $(addsuffix .${IBM2_MODEL_PFX}.${L1_2_L2}.align.gz, $(call STEM, ${domain_files}))
${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: ${domain_files}

${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X} ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: $(addsuffix .${IBM2_MODEL_PFX}.${L1_2_L2}.align.gz, $(call STEM, ${other_files}))
${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: ${other_files}


# Create a merged jpt.
${JPT_MODEL_PFX}.merged.${JOINTX}:  ${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX} ${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}
${JPT_MODEL_PFX}.merged.${JOINTX}:  ${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX} ${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}

${JPT_MODEL_PFX}.merged.${RJOINTX}:  ${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${RJOINTX} ${JPT_HMM3_MODEL_PFX}.${TRAIN_TM_OTHER}.${RJOINTX}
${JPT_MODEL_PFX}.merged.${RJOINTX}:  ${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${RJOINTX} ${JPT_IBM2_MODEL_PFX}.${TRAIN_TM_OTHER}.${RJOINTX}


# Create zn-adapted phrase table.
${CPT_MODEL_PFX}.zn-adapt.${L1_2_L2X}:  ${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L2_GIVEN_L1X} ${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L1_GIVEN_L2X}
${CPT_MODEL_PFX}.zn-adapt.${L1_2_L2X}:  ${JPT_MODEL_PFX}.merged.${JOINTX}

${CPT_MODEL_PFX}.zn-adapt.${L2_2_L1X}:  ${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L2_GIVEN_L1X} ${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L1_GIVEN_L2X}
${CPT_MODEL_PFX}.zn-adapt.${L2_2_L1X}:  ${JPT_MODEL_PFX}.merged.${RJOINTX}



################################################################################
# Tightly Packed Phrase Table.
# We need the full file names to be able to trigger all tppts.
tppt_list = ${CPT_LIST:gz=tppt}

.PHONY: tppt
tppt portageLive: SHELL=${GUARD_SHELL}
tppt portageLive: ${tppt_list}


########################################
# HELP.
.PHONY: help
help: SHELL=${GUARD_SHELL}
help:
	@echo "Special Makefile to produce a single phrase table using George's ZN-adaptation."
	@echo
	@echo "To train your models, type: make -f Makefile.zn-adapt all"
	@echo
	@echo "The main targets in this Makefile are:"
	@cat $(firstword $(MAKEFILE_LIST)) | egrep '^.PHONY:' | sed 's#^.PHONY: #   #'



########################################
# Clean up
.PHONY: clean clean.content clean.logs hide.logs
clean: SHELL=${GUARD_SHELL}
clean: clean.content clean.logs

clean.content: SHELL=${GUARD_SHELL}

clean.logs: SHELL=${GUARD_SHELL}
clean.logs:
	${RM} run-parallel-log* log.* run-p.*
	${RM} -r .logs

# Hide logs from user's view into .logs
hide.logs: SHELL=${GUARD_SHELL}
hide.logs: hide_logs_sub


# Word alignment models are:
WA_MODEL_PREFIXES = ${IBM1_MODEL_PFX} ${IBM2_MODEL_PFX} ${HMM3_MODEL_PFX}

clean.content: clean.word_alignment_models

.PHONY: clean.word_alignment_models
clean.word_alignment_models: SHELL=${GUARD_SHELL}
clean.word_alignment_models:
	$(RM) $(addsuffix .*, ${WA_MODEL_PREFIXES})

clean.content: clean.jpts

.PHONY: clean.jpts
clean.jpts: SHELL=${GUARD_SHELL}
clean.jpts:
	$(RM) jpt.*
	${RM} -r JPTPAR*

clean.content: clean.cpts

.PHONY: clean.cpts
clean.cpts: SHELL=${GUARD_SHELL}
clean.cpts:
	$(RM) cpt.*



########################################
# Resources Summary
.PHONY: time-mem
time-mem: SHELL=${GUARD_SHELL}
time-mem: resource_summary_sub



########################################
# UNITTESTS
.PHONY: unittest1
unittest1: SHELL=${GUARD_SHELL}
unittest1:
	make -Bnj1 all



################################################################################
# HELPERS
debug: SHELL=${GUARD_SHELL}
debug:
	@echo "CORPORA_DIR: ${CORPORA_DIR}"
	@echo "TRAIN_TM: ${TRAIN_TM}"
	@echo "TRAIN_TM_BASE: ${TRAIN_TM_BASE}"
	@echo "TRAIN_TM_ALL: ${TRAIN_TM_ALL}"
	@echo "TRAIN_TM_DOMAIN: ${TRAIN_TM_DOMAIN}"
	@echo "TRAIN_TM_OTHER: ${TRAIN_TM_OTHER}"
	@echo "domain_files: ${domain_files}"
	@echo "other_files: ${other_files}"

