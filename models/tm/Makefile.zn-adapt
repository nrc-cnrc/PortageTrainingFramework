#!/usr/bin/make -f
# vim:noet:ts=3:nowrap
# $Id$

# @file Makefile
# @brief What are the dependencies to train a zn-adapted conditional phrase table.
#
# @author Samuel Larkin, Darlene Stewart
#
# Technologies langagieres interactives / Interactive Language Technologiesm
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2010, Sa Majeste la Reine du Chef du Canada /
# Copyright 2010, Her Majesty in Right of Canada


# Mandatory include: master config file.
include ../../Makefile.params

include Makefile.toolkit

# Lastly include the master toolkit
include ../../Makefile.toolkit

# Include the config file.
MAKEFILE_PARAMS ?= Makefile.params
-include ${MAKEFILE_PARAMS}

# What is this module's name.
MODULE_NAME ?= tm

SHELL = ${FRAMEWORK_SHELL}

CORPORA_DIR ?= ../../corpora

TRAIN_TM        ?= train
TRAIN_TM_BASE   ?= $(TRAIN_TM:-all=)
TRAIN_TM_ALL    ?= $(TRAIN_TM_BASE:=-all)
TRAIN_TM_DOMAIN ?= $(TRAIN_TM_BASE:=-domain)
TRAIN_TM_OTHER  ?= $(TRAIN_TM_BASE:=-other)

domain_files ?= $(notdir $(wildcard ${CORPORA_DIR}/${TRAIN_TM_DOMAIN}*${LANGXZ}))
other_files  ?= $(notdir $(wildcard ${CORPORA_DIR}/${TRAIN_TM_OTHER}*${LANGXZ}))
all_files  ?= $(notdir $(wildcard ${CORPORA_DIR}/${TRAIN_TM_ALL}*${LANGXZ}))


ifeq ("","$(or $(findstring clean,${MAKECMDGOALS}),$(findstring help,${MAKECMDGOALS}))")

ifeq ("${domain_files}", "")
$(error "Make couldn't find the domain corpora files: ${CORPORA_DIR}/${TRAIN_TM_DOMAIN}*${LANGXZ}")
endif

ifeq ("${other_files}", "")
$(error "Make couldn't find the non-domain corpora files: ${CORPORA_DIR}/${TRAIN_TM_OTHER}*${LANGXZ}")
endif

endif


vpath %${LANGXZ} ${CORPORA_DIR}

.DEFAULT_GOAL := help
.DELETE_ON_ERROR:
.SUFFIXES:
.SECONDARY:


# The CPTs that need to be built/
CPT_LIST = ${CPT_MODEL_PFX}.zn-adapt.${L1_2_L2X}
# If you need to generate a conditional phrase table in the other direction aka TGT to SRC.
#CPT_LIST += ${CPT_MODEL_PFX}.zn-adapt.${L2_2_L1X}


.PHONY: all
all: zn-adapt

.PHONY: zn-adapt
zn-adapt: ${CPT_LIST}


# Train word alignment models on in domain data.
${IBM1_MODEL_PFX}.${TRAIN_TM_DOMAIN}%: IBM1_MODEL_CPUS = 1
${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}%: HMM3_MODEL_CPUS = 1

${IBM1_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L2_GIVEN_L1X}: ${domain_files}
${IBM1_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L1_GIVEN_L2X}: ${domain_files}

${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L2_GIVEN_L1X}: ${domain_files}
${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L1_GIVEN_L2X}: ${domain_files}


# Train word alignment models on all data.
${IBM1_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X}: ${domain_files} ${other_files}
${IBM1_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}: ${domain_files} ${other_files}

${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X}: ${domain_files} ${other_files}
${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}: ${domain_files} ${other_files}

${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X}: ${domain_files} ${other_files}
${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}: ${domain_files} ${other_files}


# Create joint frequency counts.
# Extract phrase alignment using HMM3 models.
${JPT_MODEL_PFX}.${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X} ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
${JPT_MODEL_PFX}.${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: ${domain_files}
${JPT_MODEL_PFX}.${HMM3_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X} ${HMM3_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
${JPT_MODEL_PFX}.${HMM3_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: ${other_files}

# Extract phrase alignment using IBM2 models.
${JPT_MODEL_PFX}.${IBM2_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X} ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
${JPT_MODEL_PFX}.${IBM2_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX}: ${domain_files}
${JPT_MODEL_PFX}.${IBM2_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L2_GIVEN_L1X} ${IBM2_MODEL_PFX}.${TRAIN_TM_ALL}.${L1_GIVEN_L2X}
${JPT_MODEL_PFX}.${IBM2_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}: ${other_files}


# Create zn-adapted phrase table.
${CPT_MODEL_PFX}.zn-adapt.${L1_2_L2X}: ${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L2_GIVEN_L1X} ${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L1_GIVEN_L2X}
${CPT_MODEL_PFX}.zn-adapt.${L1_2_L2X}: ${JPT_MODEL_PFX}.merged.${JOINTX}

${CPT_MODEL_PFX}.zn-adapt.${L2_2_L1X}: ${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L2_GIVEN_L1X} ${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${L1_GIVEN_L2X}
${CPT_MODEL_PFX}.zn-adapt.${L2_2_L1X}: ${JPT_MODEL_PFX}.merged.${RJOINTX}


# To be able to use faster joint2cond, we must merge into one single jpt files.
.INTERMEDIATE: ${JPT_MODEL_PFX}.merged.${JOINTX}
${JPT_MODEL_PFX}.merged.${JOINTX}: ${JPT_MODEL_PFX}.${HMM3_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX} ${JPT_MODEL_PFX}.${HMM3_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX} ${JPT_MODEL_PFX}.${IBM2_MODEL_PFX}.${TRAIN_TM_DOMAIN}.${JOINTX} ${JPT_MODEL_PFX}.${IBM2_MODEL_PFX}.${TRAIN_TM_OTHER}.${JOINTX}
	${TIME_MEM} \
	merge_counts $@ $+ 2> log.$@


################################################################################
# Tightly Packed Phrase Table.
# We need the full file names to be able to trigger all tppts.
tppt_list = ${CPT_LIST:gz=tppt}

.PHONY: tppt
tppt portageLive: ${tppt_list}


########################################
# HELP.
.PHONY: help
help: SHELL=${GUARD_SHELL}
help:
	@echo "Special Makefile to produce a single phrase table using George's ZN-adaptation."
	@echo
	@echo "To train your models, type: make -f Makefile.zn-adapt all"
	@echo
	@echo "The main targets in this Makefile are:"
	@cat $(firstword $(MAKEFILE_LIST)) | egrep '^.PHONY:' | sed 's#^.PHONY: #   #'



########################################
# Clean up
.PHONY: clean clean.content clean.logs hide.logs
clean: SHELL=${GUARD_SHELL}
clean: clean.content clean.logs

clean.content: SHELL=${GUARD_SHELL}

clean.logs: SHELL=${GUARD_SHELL}
clean.logs:
	${RM} run-parallel-log* log.* run-p.*
	${RM} -r .logs

# Hide logs from user's view into .logs
hide.logs: SHELL=${GUARD_SHELL}
hide.logs: hide_logs_sub


WA_MODEL_PREFIXES = ${IBM1_MODEL_PFX} ${IBM2_MODEL_PFX} ${HMM3_MODEL_PFX}

clean.content: clean.word_alignment_models

.PHONY: clean.word_alignment_models
clean.word_alignment_models: SHELL=${GUARD_SHELL}
clean.word_alignment_models:
	$(RM) $(addsuffix .*,${WA_MODEL_PREFIXES})

clean.content: clean.jpts

.PHONY: clean.jpts
clean.jpts: SHELL=${GUARD_SHELL}
clean.jpts:
	$(RM) jpt.*
	${RM} -r JPTPAR*

clean.content: clean.cpts

.PHONY: clean.cpts
clean.cpts: SHELL=${GUARD_SHELL}
clean.cpts:
	$(RM) cpt.*



########################################
# Resources Summary
.PHONY: time-mem
time-mem: SHELL=${GUARD_SHELL}
time-mem: resource_summary_sub


########################################
# HELPERS
debug: SHELL=${GUARD_SHELL}
debug:
	@echo "CORPORA_DIR: ${CORPORA_DIR}"
	@echo "TRAIN_TM: ${TRAIN_TM}"
	@echo "TRAIN_TM_BASE: ${TRAIN_TM_BASE}"
	@echo "TRAIN_TM_ALL: ${TRAIN_TM_ALL}"
	@echo "TRAIN_TM_DOMAIN: ${TRAIN_TM_DOMAIN}"
	@echo "TRAIN_TM_OTHER: ${TRAIN_TM_OTHER}"
	@echo "domain_files: ${domain_files}"
	@echo "other_files: ${other_files}"

