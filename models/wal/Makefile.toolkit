# vim:noet:ts=3:nowrap

# @file Makefile.toolkit
# @brief Makefile targets and recipes to create Word Alignment files for corpora.
#
# @author Samuel Larkin
#
# Traitement multilingue de textes / Multilingual Text Processing
# Tech. de l'information et des communications / Information and Communications Tech.
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2015, Sa Majeste la Reine du Chef du Canada
# Copyright 2015, Her Majesty in Right of Canada

WAL_DIR_PFX := $(dir $(lastword ${MAKEFILE_LIST}))

# We assume the top level Makefile.params has already been included.
include ${WAL_DIR_PFX}../Makefile.definition

# Given the user's configuration, what is the minimal set of model types that
# we need to produce.
EXPECTED_MODEL_TYPES := $(strip $(sort ${MERGED_CPT_JPT_TYPES}))
EXPECTED_MODEL_TYPES_PFX := $(foreach m, ${EXPECTED_MODEL_TYPES}, ${${m}_MODEL_PFX})


################################################################################
# Word Alignment Models.
ALIGN_MODEL_TYPE := -hmm


########################################
# Fast Align
%.${FAST_ALIGN_MODEL_PFX}.${L1_2_L2}.align.gz:
	RP_PSUB_OPTS="-N $@ ${PSUB_OPTS}" \
	set -o pipefail; \
	time-mem \
	align-words \
		${ALIGNMENT_SYMMETRIZATION_OPTIONS} \
		-o sri \
		-ibm 0 -sri \
		$(call interleave4, $(filter %${L1X},$+), $(filter %${L2X},$+), $(filter %.${L1_2_L2}.fast_align.gz,$+), $(filter %.${L2_2_L1}.fast_align.gz,$+)) \
		2> log.${@:.gz=} \
	| gzip > $@


########################################
# IBM4
%.${IBM4_MODEL_PFX}.${L1_2_L2}.align.gz:
	RP_PSUB_OPTS="-N $@ ${PSUB_OPTS}" \
	set -o pipefail; \
	time-mem \
	align-words \
		${ALIGNMENT_SYMMETRIZATION_OPTIONS} \
		-o sri \
		-ibm 0 -giza2 \
		$(call interleave4, $(filter %${SRC_LANG}.lc,$+), $(filter %${TGT_LANG}.lc,$+), $(filter %${L1_2_L2}.${IBM4_MODEL_PFX}.alignment.gz,$+), $(filter %${L2_2_L1}.${IBM4_MODEL_PFX}.alignment.gz,$+)) \
		2> log.${@:.gz=} \
	| gzip > $@


########################################
# IBM1, IBM2 & HMM
%.${IBM1_MODEL_PFX}.${L1_2_L2}.align.gz:  override ALIGN_MODEL_TYPE=-ibm 1
%.${IBM2_MODEL_PFX}.${L1_2_L2}.align.gz:  override ALIGN_MODEL_TYPE=-ibm 2

%.${L1_2_L2}.align.gz:  SHELL=${FRAMEWORK_SHELL}
%.${L1_2_L2}.align.gz:
	RP_PSUB_OPTS="-N $@ ${PSUB_OPTS}" \
	set -o pipefail; \
	parallelize.pl \
		-stripe \
		-n ${PARALLELISM_LEVEL_TM} \
		$(addprefix -s , $(filter %${L1} %${L1X} %${L2} %${L2X}, $+)) \
		'align-words \
			${ALIGNMENT_SYMMETRIZATION_OPTIONS} \
			-o sri \
			${ALIGN_MODEL_TYPE} \
			$(filter %${L2_GIVEN_L1X}, $+)  $(filter %${L1_GIVEN_L2X}, $+) \
			$(call filter_interleave, %${L1} %${L1X}, %${L2} %${L2X}, %${L2_GIVEN_L1X} %${L1_GIVEN_L2X}, $+)' \
		2> log.${@:.gz=} \
	| gzip > $@


########################################
# Reversed alignment.
%.${L2_2_L1}.align.gz:  SHELL=${LOCAL_SHELL}
%.${L2_2_L1}.align.gz:  %.${L1_2_L2}.align.gz
	set -o pipefail; \
	zcat $< \
	| perl -ple 's/(\d+)-(\d+)/$$2-$$1/g' \
	| gzip \
	2> log.${@:.gz=} \
	> $@


################################################################################
# GIZA SPECIFIC TARGETS.
debug_giza:  $(addsuffix /${L1_2_L2}.${IBM4_MODEL_PFX}.alignment.gz, ${ALL_WAMS})
debug_giza:  $(addsuffix /${L2_2_L1}.${IBM4_MODEL_PFX}.alignment.gz, ${ALL_WAMS})

# NOTE/WARNING:
#   In order to properly bridge giza's output with Portage, the correct dependency for:
#      - Portage's src to tgt model is giza's tgt given src files;
#      - Portage's tgt to src model is giza's src given tgt files.
$(addsuffix /${L1_2_L2}.${IBM4_MODEL_PFX}.alignment.gz, ${ALL_WAMS}):  %/${L1_2_L2}.${IBM4_MODEL_PFX}.alignment.gz:  %/${L2_GIVEN_L1}.gizacfg
$(addsuffix /${L2_2_L1}.${IBM4_MODEL_PFX}.alignment.gz, ${ALL_WAMS}):  %/${L2_2_L1}.${IBM4_MODEL_PFX}.alignment.gz:  %/${L1_GIVEN_L2}.gizacfg
%.${IBM4_MODEL_PFX}.alignment.gz:  SHELL=${LOCAL_SHELL}
%.${IBM4_MODEL_PFX}.alignment.gz:
	mkdir -p $*
	set -o pipefail; \
	merge_alignment.py ${<:gizacfg=A3.final.part}* \
	| gzip > $@


################################################################################
# FORCE ALIGN

# We'll need to force align the corpora used to "tune" the mixtm.
FORCE_ALIGN_SET := $(sort ${TUNE_MIXTM_FINAL} ${TUNE_DECODE} ${TUNE_RESCORE} ${TUNE_CE} ${TUNE_BILM} ${TEST_SET})
ifdef MIXTM_USE_GLOBAL_WORD_ALIGNMENT_MODEL
# We also need to force align all corpora used in mixtm when using 1wam.
# By adding the MIXTM to FORCE_ALIGN_SET, we effectively tell make to use the
# force align rules instead of the normal IBM4 rules.
FORCE_ALIGN_SET += $(sort ${MIXTM})

# The word alignment models used to train mixtm in 1wam is the global word alignment.
# MIXTM_TRAIN_MIX MUST be 1wam
# TODO WHY override MIXTM_TRAIN_MIX?
#override MIXTM_TRAIN_MIX := 1wam
endif
$(info FORCE ALIGNING IBM4: ${FORCE_ALIGN_SET})

${FORCE_ALIGN_SET}:  SHELL=${LOCAL_SHELL}
${FORCE_ALIGN_SET}:  %:
	mkdir -p $@

# TODO:  where should we put these rules?
# When creating the filtered version of a corpora we need to change file
# extension to the uncompressed version when it comes to heldouts.
$(foreach c, ${FORCE_ALIGN_SET}, \
	$(eval \
		$c/${SRC_LANG}.lc:  override L1X = ${L1}) \
	$(eval \
		$c/${SRC_LANG}.lc:  override L2X = ${L2}) \
)

#include ../ibm/Makefile.toolkit
# In order to pick up the proper extension for corpora, either compress or not,
# we'll need to do second expansion.
.SECONDEXPANSION:
# Clean up the inputs for giza.
%/${SRC_LANG}.lc:  SHELL=${LOCAL_SHELL}
%/${SRC_LANG}.lc:  %$${L1X}  %$${L2X}  | %
	giza_filter $+ $@ ${@:${SRC_LANG}.lc=${TGT_LANG}.lc} 2> $@.log

%/${TGT_LANG}.lc:  SHELL=${LOCAL_SHELL}
%/${TGT_LANG}.lc:  %/${SRC_LANG}.lc  | %
	test -s $@ && sleep 1 && touch --reference=$< $@


debug_forceAlign:  $(addsuffix /${SRC_LANG}.lc.vcb, ${FORCE_ALIGN_SET})
debug_forceAlign:  $(addsuffix /${TGT_LANG}.lc.vcb, ${FORCE_ALIGN_SET})

# Create the vocabulary files.
%/${SRC_LANG}.lc.vcb:  SHELL=${LOCAL_SHELL}
%/${SRC_LANG}.lc.vcb:  %/${SRC_LANG}.lc  %/${TGT_LANG}.lc  | %
	plain2snt $+ 2> $@.log

%/${TGT_LANG}.lc.vcb:  SHELL=${LOCAL_SHELL}
%/${TGT_LANG}.lc.vcb:  %/${SRC_LANG}.lc.vcb  | %
	test -s $@ && sleep 1 && touch --reference=$< $@

%/${SRC_LANG}.lc_${TGT_LANG}.lc.snt:  SHELL=${LOCAL_SHELL}
%/${SRC_LANG}.lc_${TGT_LANG}.lc.snt:  %/${SRC_LANG}.lc.vcb  %/${TGT_LANG}.lc.vcb  | %
	test -s $@ && sleep 1 && touch --reference=$< $@

%/${TGT_LANG}.lc_${SRC_LANG}.lc.snt:  SHELL=${LOCAL_SHELL}
%/${TGT_LANG}.lc_${SRC_LANG}.lc.snt:  %/${SRC_LANG}.lc.vcb  %/${TGT_LANG}.lc.vcb  | %
	test -s $@ && sleep 1 && touch --reference=$< $@


vpath ${MIXTM_TRAIN_MIX}/% ${TM_DIR_PFX} ${TM_DIR_PFX}mixtm

PLAIN2SNT_HASCVB := plain2snt-hasvcb.py

# debug_forceAlign is used to debug the force aligned targets for mixture tm.
.PHONY:  debug_forceAlign

# NOTE: the filtered rules are located in the giza section.
debug_forceAlign:  $(addsuffix /${SRC_LANG}.lc, ${FORCE_ALIGN_SET})
debug_forceAlign:  $(addsuffix /${TGT_LANG}.lc, ${FORCE_ALIGN_SET})


#.SECONDEXPANSION:
#$(addsuffix /${SRC_LANG}.lc, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
#$(addsuffix /${SRC_LANG}.lc, ${FORCE_ALIGN_SET}):  %/${SRC_LANG}.lc:  %$${L1} %$${L2} | %
#	giza_filter $+ $@ ${@:${SRC_LANG}.lc=${TGT_LANG}.lc} 2> $@.log
#
#$(addsuffix /${TGT_LANG}.lc, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
#$(addsuffix /${TGT_LANG}.lc, ${FORCE_ALIGN_SET}):  %/${TGT_LANG}.lc:  %/${SRC_LANG}.lc | %
#	test -s $@ && sleep 1 && touch --reference=$< $@


$(addsuffix /${SRC_LANG}-${TGT_LANG}.snt, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
$(addsuffix /${SRC_LANG}-${TGT_LANG}.snt, ${FORCE_ALIGN_SET}):  %/${SRC_LANG}-${TGT_LANG}.snt: \
			%/${SRC_LANG}.lc.vcb \
			| %
	@test -s $@ && sleep 1 && touch --reference=$< $@

$(addsuffix /${TGT_LANG}-${SRC_LANG}.snt, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
$(addsuffix /${TGT_LANG}-${SRC_LANG}.snt, ${FORCE_ALIGN_SET}):  %/${TGT_LANG}-${SRC_LANG}.snt: \
			%/${SRC_LANG}.lc.vcb \
			| %
	@test -s $@ && sleep 1 && touch --reference=$< $@


$(addsuffix /${TGT_LANG}.lc.vcb, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
$(addsuffix /${TGT_LANG}.lc.vcb, ${FORCE_ALIGN_SET}):  %/${TGT_LANG}.lc.vcb: \
			%/${SRC_LANG}.lc.vcb \
			| %
	@test -s $@ && sleep 1 && touch --reference=$< $@

debug_forceAlign:  $(addsuffix /${SRC_LANG}.lc.vcb, ${FORCE_ALIGN_SET})


vpath %.lc.vcb ${WAL_DIR_PFX}../ibm

# NOTE the lc.vcb is an extension of tm-train/${SRC_LANG}.lc.vcb with the dev vocab.
$(addsuffix /${SRC_LANG}.lc.vcb, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
$(addsuffix /${SRC_LANG}.lc.vcb, ${FORCE_ALIGN_SET}):  %/${SRC_LANG}.lc.vcb: \
			$${MIXTM_TRAIN_MIX}/${SRC_LANG}.lc.vcb \
			$${MIXTM_TRAIN_MIX}/${TGT_LANG}.lc.vcb \
			%/${SRC_LANG}.lc \
			%/${TGT_LANG}.lc \
			| %
	${PLAIN2SNT_HASCVB} \
		$+ \
		$*/${TGT_LANG}-${SRC_LANG}.snt $*/${SRC_LANG}-${TGT_LANG}.snt \
		$*/${SRC_LANG}.lc.vcb $*/${TGT_LANG}.lc.vcb

debug_forceAlign:  $(addsuffix /${SRC_LANG}.lc.vcb.classes, ${FORCE_ALIGN_SET})
debug_forceAlign:  $(addsuffix /${TGT_LANG}.lc.vcb.classes, ${FORCE_ALIGN_SET})


vpath %.lc.vcb.classes ${WAL_DIR_PFX}../ibm

$(addsuffix /${SRC_LANG}.lc.vcb.classes, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
$(addsuffix /${SRC_LANG}.lc.vcb.classes, ${FORCE_ALIGN_SET}):  %/${SRC_LANG}.lc.vcb.classes: \
			$${MIXTM_TRAIN_MIX}/${SRC_LANG}.lc.vcb.classes \
			| %
	ln -fs ../$< $@

$(addsuffix /${TGT_LANG}.lc.vcb.classes, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
$(addsuffix /${TGT_LANG}.lc.vcb.classes, ${FORCE_ALIGN_SET}):  %/${TGT_LANG}.lc.vcb.classes: \
			$${MIXTM_TRAIN_MIX}/${TGT_LANG}.lc.vcb.classes \
			| %
	ln -fs ../$< $@

debug_forceAlign:  $(addsuffix /${L1_2_L2}.cooc, ${FORCE_ALIGN_SET})
debug_forceAlign:  $(addsuffix /${L2_2_L1}.cooc, ${FORCE_ALIGN_SET})


$(addsuffix /${L1_2_L2}.cooc, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
$(addsuffix /${L1_2_L2}.cooc, ${FORCE_ALIGN_SET}):  %/${L1_2_L2}.cooc: \
			%/${SRC_LANG}.lc.vcb \
			%/${TGT_LANG}.lc.vcb \
			%/${TGT_LANG}-${SRC_LANG}.snt \
			| %
	snt2cooc $@  $+ 2> $@.log

$(addsuffix /${L2_2_L1}.cooc, ${FORCE_ALIGN_SET}):  SHELL=${LOCAL_SHELL}
$(addsuffix /${L2_2_L1}.cooc, ${FORCE_ALIGN_SET}):  %/${L2_2_L1}.cooc: \
			%/${TGT_LANG}.lc.vcb \
			%/${SRC_LANG}.lc.vcb \
			%/${SRC_LANG}-${TGT_LANG}.snt \
			| %
	snt2cooc $@  $+ 2> $@.log

debug_forceAlign:  $(addsuffix /${L1_GIVEN_L2}.gizacfg, ${FORCE_ALIGN_SET})
debug_forceAlign:  $(addsuffix /${L2_GIVEN_L1}.gizacfg, ${FORCE_ALIGN_SET})


vpath %.gizacfg ${WAL_DIR_PFX}../ibm

$(addsuffix /${L2_GIVEN_L1}.gizacfg, ${FORCE_ALIGN_SET}):  SHELL=${FRAMEWORK_SHELL}
$(addsuffix /${L2_GIVEN_L1}.gizacfg, ${FORCE_ALIGN_SET}):  %/${L2_GIVEN_L1}.gizacfg: \
				%/${TGT_LANG}.lc.vcb \
				%/${SRC_LANG}.lc.vcb \
				%/${SRC_LANG}.lc.vcb.classes \
				%/${TGT_LANG}.lc.vcb.classes \
				%/${TGT_LANG}-${SRC_LANG}.snt \
				%/${L1_2_L2}.cooc \
				$${MIXTM_TRAIN_MIX}/${L2_GIVEN_L1}.gizacfg \
				| %
	RP_PSUB_OPTS="-${IBM4_MODEL_CPUS} -N $@" \
	${TIME_MEM} \
	mgiza \
		$(filter %.gizacfg, $+) \
		-sourcevocabularyfile $(filter %${SRC_LANG}.lc.vcb, $+) \
		-targetvocabularyfile $(filter %${TGT_LANG}.lc.vcb, $+) \
		-corpusfile $(filter %.snt, $+) \
		-coocurrencefile $(filter %.cooc, $+) \
		-outputpath $* \
		-outputfileprefix $(notdir ${@:.gizacfg=}) \
		-m1 0 -m2 0 -mh 0 -m3 0 -m4 1 \
		-restart 11 \
		-previoust   $(patsubst %.gizacfg,%.t3.final, $(filter %.gizacfg, $+)) \
		-previousa   $(patsubst %.gizacfg,%.a3.final, $(filter %.gizacfg, $+)) \
		-previousd   $(patsubst %.gizacfg,%.d3.final, $(filter %.gizacfg, $+)) \
		-previousn   $(patsubst %.gizacfg,%.n3.final, $(filter %.gizacfg, $+)) \
		-previousd4  $(patsubst %.gizacfg,%.d4.final, $(filter %.gizacfg, $+)) \
		-previousd42 $(patsubst %.gizacfg,%.D4.final, $(filter %.gizacfg, $+)) \
		&> $@.log

$(addsuffix /${L1_GIVEN_L2}.gizacfg, ${FORCE_ALIGN_SET}):  SHELL=${FRAMEWORK_SHELL}
$(addsuffix /${L1_GIVEN_L2}.gizacfg, ${FORCE_ALIGN_SET}):  %/${L1_GIVEN_L2}.gizacfg: \
				%/${TGT_LANG}.lc.vcb \
				%/${SRC_LANG}.lc.vcb \
				%/${SRC_LANG}.lc.vcb.classes \
				%/${TGT_LANG}.lc.vcb.classes \
				%/${SRC_LANG}-${TGT_LANG}.snt \
				%/${L2_2_L1}.cooc \
				$${MIXTM_TRAIN_MIX}/${L1_GIVEN_L2}.gizacfg \
				| %
	RP_PSUB_OPTS="-${IBM4_MODEL_CPUS} -N $@" \
	${TIME_MEM} \
	mgiza \
		$(filter %.gizacfg, $+) \
		-sourcevocabularyfile $(filter %${TGT_LANG}.lc.vcb, $+) \
		-targetvocabularyfile $(filter %${SRC_LANG}.lc.vcb, $+) \
		-corpusfile $(filter %.snt, $+) \
		-coocurrencefile $(filter %.cooc, $+) \
		-outputpath $* \
		-outputfileprefix $(notdir ${@:.gizacfg=}) \
		-m1 0 -m2 0 -mh 0 -m3 0 -m4 1 \
		-restart 11 \
		-previoust   $(patsubst %.gizacfg,%.t3.final, $(filter %.gizacfg, $+)) \
		-previousa   $(patsubst %.gizacfg,%.a3.final, $(filter %.gizacfg, $+)) \
		-previousd   $(patsubst %.gizacfg,%.d3.final, $(filter %.gizacfg, $+)) \
		-previousn   $(patsubst %.gizacfg,%.n3.final, $(filter %.gizacfg, $+)) \
		-previousd4  $(patsubst %.gizacfg,%.d4.final, $(filter %.gizacfg, $+)) \
		-previousd42 $(patsubst %.gizacfg,%.D4.final, $(filter %.gizacfg, $+)) \
		&> $@.log

debug_forceAlign:  $(addsuffix /${L1_2_L2}.${IBM4_MODEL_PFX}.alignment.gz, ${FORCE_ALIGN_SET})
debug_forceAlign:  $(addsuffix /${L2_2_L1}.${IBM4_MODEL_PFX}.alignment.gz, ${FORCE_ALIGN_SET})


# NOTE:  Some of the FORCE_ALIGN_SET corpora are also in ALL_WAMS and there are
# dependencies already stated for those, that is why the following dependencies
# are for the difference between FORCE_ALIGN_SET & ALL_WAMS.
$(addsuffix /${L1_2_L2}.${IBM4_MODEL_PFX}.alignment.gz, $(filter-out ${ALL_WAMS}, ${FORCE_ALIGN_SET})): \
		%/${L1_2_L2}.${IBM4_MODEL_PFX}.alignment.gz: \
			%/${L2_GIVEN_L1}.gizacfg \
			| %
$(addsuffix /${L2_2_L1}.${IBM4_MODEL_PFX}.alignment.gz, $(filter-out ${ALL_WAMS}, ${FORCE_ALIGN_SET})): \
		%/${L2_2_L1}.${IBM4_MODEL_PFX}.alignment.gz: \
			%/${L1_GIVEN_L2}.gizacfg \
			| %

debug_forceAlign:  $(addsuffix .${IBM4_MODEL_PFX}.${L1_2_L2}.align.gz, ${FORCE_ALIGN_SET})


