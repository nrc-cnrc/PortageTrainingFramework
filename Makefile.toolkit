# vim:noet:ts=3:nowrap

# @file Makefile.toolkit
# @brief Master toolkit with common targets and recipes for all modules.
#
# @author Samuel Larkin
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2010, Sa Majeste la Reine du Chef du Canada /
# Copyright 2010, Her Majesty in Right of Canada

# Make sure plugins in the plugins directory will be used by the framework.
ifeq (${MAKELEVEL},0)
   export PATH := $(abspath $(dir $(lastword ${MAKEFILE_LIST}))plugins):${PATH}
endif

################################################################################
# HELPERS
########################################


# Helper function to create reference files based on a stem.
# Usage: $(call CREATE_REFERENCE_NAMES, ${TUNE_RESCORE}[, EXTENSION])
CREATE_REFERENCE_NAMES = $(strip $(foreach c,$1,$(addprefix $c_${TGT_LANG},$(or $(addsuffix $(or $(strip $2),${LANGX}),$(strip ${REFERENCE_INDICES})),$(or $(strip $2),${LANGX})))))

# Helper recipe to list all corpora in use.
define HELP_LIST_ALL_CORPORA
	@echo "Your corpora are:"
	@echo "  train LMs: ${TRAIN_LM}"
	$(if $(strip ${TUNE_LM}),@echo "  tune LM parameters: ${TUNE_LM}")
	$(if $(strip ${MIXLM}),@echo "  train MixLM: ${MIXLM}")
	$(if $(strip ${TRAIN_COARSELM}),@echo "  train coarse LMs: ${TRAIN_COARSELM}")
	$(if $(strip ${TUNE_COARSELM}),@echo "  tune coarse LM parameters: ${TUNE_COARSELM}")
	$(if $(strip ${TRAIN_BILM}),@echo "  train BiLMs: ${TRAIN_BILM}")
	$(if $(strip ${TUNE_BILM}),@echo "  tune BiLM parameters: ${TUNE_BILM}")
	$(if $(strip ${TRAIN_WCL}),@echo "  train word classes: ${TRAIN_WCL}")
	$(if $(strip ${TRAIN_TC}),@echo "  train TC: ${TRAIN_TC}")
	@echo "  train TM: ${TRAIN_TM}"
	$(if $(strip ${MIXTM}),@echo "  train MixTM: ${MIXTM}")
	$(if $(strip ${MIXTM_TRAIN_MIX}),@echo "  tune MixTM mix: ${MIXTM_TRAIN_MIX}")
	$(if $(strip ${TRAIN_LDM}),@echo "  train LDM: ${TRAIN_LDM}")
	$(if $(strip ${TRAIN_HLDM}),@echo "  train HLDM: ${TRAIN_HLDM}")
	$(if $(strip ${TRAIN_SPARSE}),@echo "  train sparse: ${TRAIN_SPARSE}")
	@echo "  tune decode: ${TUNE_DECODE}"
	$(if $(strip ${TUNE_DECODE_VARIANTS}),@echo "  tune decode variants: $(addprefix ${TUNE_DECODE}, ${TUNE_DECODE_VARIANTS})")
	@echo "  tune rescore: ${TUNE_RESCORE}"
	$(if $(strip ${TUNE_CE}),@echo "  tune CE: ${TUNE_CE}")
endef

# Helper recipe to list the main targets for a Makefile:
define HELP_LIST_MAIN_TARGETS
	@echo
	@echo "The main targets in this Makefile are:"
	@echo " " $(sort ${MAIN_TARGETS})
endef

# Helper recipe to list the expected output files for a Makefile:
define HELP_LIST_EXPECTED_FILES
	@echo
	@echo "Expected output files are:"
	@tr ' ' '\n' <<< "$(sort ${EXPECTED_FILES})" | sed -e 's/^/  /'
endef

# Helper recipes for LM_TOOLKIT help for a *lm Makefile:
define HELP_LM_TOOLKIT
	@echo "In Makefile.params, define LM_TOOLKIT=SRI, LM_TOOLKIT=MIT or LM_TOOLKIT=IRST"
	@echo "to specify the LM toolkit to use."
	@echo "LM_TOOLKIT=${LM_TOOLKIT}"
	@echo
endef

define HELP_LM_TOOLKIT_2
	@echo "In Makefile.params, define LM_TOOLKIT=SRI or LM_TOOLKIT=MIT to specify the"
	@echo "LM toolkit to use."
	@echo "LM_TOOLKIT=${LM_TOOLKIT}"
	@echo
endef

# Helper recipes for IRSTLM help for a Makefile:
ifeq (${LM_TOOLKIT},IRST)
define HELP_IRSTLM
	@echo "Please run the following in order for this framework to run properly:"
	@echo "   export PATH=${IRSTLM_BIN_DIR}:\$$PATH"
	@echo "   export IRSTLM=${IRSTLM}"
	@echo
endef
else
define HELP_IRSTLM
endef
endif



########################################
# List of files that should read-only for safety.  Mainly this list
# should be composed of final targets from a Makefile.
FILES_TO_BE_LOCKED ?=

# Change to read-only aka "Locks" precious files.
.PHONY: lock
lock: SHELL=${LOCAL_SHELL}
lock:
	-chmod u-w ${FILES_TO_BE_LOCKED}

# Change to read-write aka "Unlocks" precious files.
.PHONY: unlock
unlock: SHELL=${LOCAL_SHELL}
unlock:
	-chmod u+w ${FILES_TO_BE_LOCKED}


########################################
# Hide logs.
.PHONY: hide_logs_sub
hide_logs_sub: SHELL=${LOCAL_SHELL}
hide_logs_sub:
	mkdir -p .logs
	-mv log.* run-parallel-logs-* .logs
	-ls * | egrep '\.[joe][0-9]{1,6}' | xargs -i mv {} .logs


########################################
# Summarize resources usage for this system.
.PHONY: resource_summary_sub
resource_summary_sub: SHELL=${LOCAL_SHELL}
resource_summary_sub:
	@find -type f -name log.\* -o -name \*.log \
	| sort \
	| sed 's/^\.\///' \
	| xargs time-mem-tally.pl -no-dir -m ${MODULE_NAME} \
	| second-to-hms.pl \
	| expand-auto.pl



################################################################################
# UNITTESTS
.PHONY:  unittest_create_references
unittest_create_references: unittest_create_references_multiple_1
unittest_create_references: unittest_create_references_multiple_2
unittest_create_references: unittest_create_references_single_1
unittest_create_references: unittest_create_references_single_2
unittest_create_references: unittest_create_references_empty

unittest_create_references%:  TGT_LANG=l
unittest_create_references%:  LANGX=.lc

unittest_create_references_multiple%:  REFERENCE_INDICES=1 2
.PHONY: unittest_create_references_multiple_1
# Create multiple references with the default extension.
unittest_create_references_multiple_1:
	@[[ "$(call CREATE_REFERENCE_NAMES, a)" == "a_l1.lc a_l2.lc" ]]

.PHONY: unittest_create_references_multiple_2
# Create multiple references with a different extehsion.
unittest_create_references_multiple_2:
	@[[ "$(call CREATE_REFERENCE_NAMES, a, .al)" == "a_l1.al a_l2.al" ]]

unittest_create_references_single%:  REFERENCE_INDICES=
.PHONY: unittest_create_references_single_1
# Create a single reference with the default extension.
unittest_create_references_single_1:
	@[[ "$(call CREATE_REFERENCE_NAMES, a)" == "a_l.lc" ]]

.PHONY: unittest_create_references_single_2
# Create a single reference with a different extehsion.
unittest_create_references_single_2:
	@[[ "$(call CREATE_REFERENCE_NAMES, a, .al)" == "a_l.al" ]]

.PHONY: unittest_create_references_empty
unittest_create_references_empty:
	@[[ "$(call CREATE_REFERENCE_NAMES,)" == "" ]]

