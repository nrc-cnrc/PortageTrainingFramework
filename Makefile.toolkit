# vim:noet:ts=3:nowrap
# $Id$

# @file Makefile.toolkit
# @brief
#
# @author Samuel Larkin
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2010, Sa Majeste la Reine du Chef du Canada /
# Copyright 2010, Her Majesty in Right of Canada

# Make sure plugins in the plugins directory will be used by the framework.
ifeq (${MAKELEVEL},0)
   export PATH := $(abspath $(dir $(lastword ${MAKEFILE_LIST}))plugins):${PATH}
endif

################################################################################
# HELPERS
########################################


# Helper function to create reference files based on a stem.
# Usage: $(call CREATE_REFERENCES, ${TUNE_RESCORE}[, EXTENSION])
CREATE_REFERENCES = $(strip $(addprefix $1_${TGT_LANG},$(or $(addsuffix $(or $(strip $2),${LANGX}),$(strip ${REFERENCE_INDICES})),$(or $(strip $2),${LANGX}))))


########################################
# List of files that should read-only for safety.  Mainly this list
# should be composed of final targets from a Makefile.
FILES_TO_BE_LOCKED ?=

# Change to read-only aka "Locks" precious files.
.PHONY: lock
lock: SHELL=${GUARD_SHELL}
lock:
	-chmod u-w ${FILES_TO_BE_LOCKED}

# Change to read-write aka "Unlocks" precious files.
.PHONY: unlock
unlock: SHELL=${GUARD_SHELL}
unlock:
	-chmod u+w ${FILES_TO_BE_LOCKED}



########################################
# Hide logs.
.PHONY: hide_logs_sub
hide_logs_sub: SHELL=${GUARD_SHELL}
hide_logs_sub:
	mkdir -p .logs
	-mv log.* run-parallel-logs-* .logs
	-ls * | egrep '\.[joe][0-9]{1,6}' | xargs -i mv {} .logs



########################################
# Summarize resources usage for this system.
.PHONY: resource_summary_sub
resource_summary_sub: SHELL=${GUARD_SHELL}
resource_summary_sub:
	@find -type f -name log.\* -o -name \*.log \
	| sort \
	| sed 's/^\.\///' \
	| xargs time-mem-tally.pl -no-dir -m ${MODULE_NAME} \
	| second-to-hms.pl \
	| expand-auto.pl





################################################################################
# UNITTESTS
.PHONY:  unittest_create_references
unittest_create_references: unittest_create_references_multiple_1
unittest_create_references: unittest_create_references_multiple_2
unittest_create_references: unittest_create_references_single_1
unittest_create_references: unittest_create_references_single_2

unittest_create_references%:  TGT_LANG=l
unittest_create_references%:  LANGX=.lc

unittest_create_references_multiple%:  REFERENCE_INDICES=1 2
.PHONY: unittest_create_references_multiple_1
# Create multiple references with the default extension.
unittest_create_references_multiple_1:
	@[[ "$(call CREATE_REFERENCES, a)" == "a_l1.lc a_l2.lc" ]]

.PHONY: unittest_create_references_multiple_2
# Create multiple references with a different extehsion.
unittest_create_references_multiple_2:
	@[[ "$(call CREATE_REFERENCES, a, .al)" == "a_l1.al a_l2.al" ]]

unittest_create_references_single%:  REFERENCE_INDICES=
.PHONY: unittest_create_references_single_1
# Create a single reference with the default extension.
unittest_create_references_single_1:
	@[[ "$(call CREATE_REFERENCES, a)" == "a_l.lc" ]]

.PHONY: unittest_create_references_single_2
# Create a single reference with a different extehsion.
unittest_create_references_single_2:
	@[[ "$(call CREATE_REFERENCES, a, .al)" == "a_l.al" ]]

