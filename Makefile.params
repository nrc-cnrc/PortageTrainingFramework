# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2008, Sa Majeste la Reine du Chef du Canada
# Copyright 2008, Her Majesty in Right of Canada

################################################################################
# User definable variables

# This is the from/source language
export SRC_LANG ?= en
# This is the to/target language
export TGT_LANG ?= fr

# Here we specify the stem of the corpora files.
# files should look like this: <STEM>_<LANGUAGE>.raw
# i.e. test1_fr.raw
export TRAIN_LM      ?= lm-train
export TRAIN_TM      ?= train
export TUNE_DECODE   ?= dev1
export TUNE_RESCORE  ?= dev2
export TRANSLATE_SET ?= test1 test2

# The prefix_root where we can find IRSTLM/bin, which must also be on your
# PATH.
export IRSTLM ?= /home/larkins/sandboxes/irstlm

# Uncomment the following line if you have acces to SRILM, in which case its
# executable scripts and programs should be on your PATH.
#LM_TOOLKIT_SRI=1

# Train and apply rescoring if this variable is defined.
# Comment out to disable rescoring.
DO_RESCORING=1

# Train and apply truecassing if this variable is defined.
# Comment out to disable truecasing.
DO_TRUECASING=1

# If you have ICU installed and have compiled PORTAGE shared with icu,
# uncomment the following line.
#ICU=1

# If you are on a cluster that is run-parallel.sh friendly, define the following
#USING_CLUSTER=1

# Automatically detects if we are on a cluster.
ifeq ($(strip $(shell which-test.sh qsub && echo "true")),true)
   USING_CLUSTER ?= 1
endif
ifdef NOCLUSTER
   USING_CLUSTER =
endif
export USING_CLUSTER


ifdef USING_CLUSTER
   PARALLELISM_LEVEL_LM ?= 5
   PARALLELISM_LEVEL_TM ?= 5
   PARALLELISM_LEVEL_TUNE_DECODE  ?= 10
   PARALLELISM_LEVEL_TUNE_RESCORE ?= 10
   PARALLELISM_LEVEL_TRANSLATE    ?= 10
   $(warn "Running in cluster mode.")
else
   PARALLELISM_LEVEL_LM ?= 1
   PARALLELISM_LEVEL_TM ?= 1
   PARALLELISM_LEVEL_TUNE_DECODE  ?= 1
   PARALLELISM_LEVEL_TUNE_RESCORE ?= 1
   PARALLELISM_LEVEL_TRANSLATE    ?= 1
   $(warn "Running in local mode.")
endif
export PARALLELISM_LEVEL_LM
export PARALLELISM_LEVEL_TM
export PARALLELISM_LEVEL_TUNE_DECODE
export PARALLELISM_LEVEL_TUNE_RESCORE
export PARALLELISM_LEVEL_TRANSLATE


################################################################################
# System defined variables
# Don't change the following unless you have some specific needs.

# Compress extension.
export GZ ?= .gz

# Raw file's extension.
export ALIGNX ?= .al

# Extension for rule files which must also be source file.
export RULEX ?= _${SRC_LANG}.rule

# Language extension for phrase table corpora.
# Extension for corpora.
export LANGX  ?= .lc
# Extension for compressed corpora.
export LANGXZ ?= ${LANGX}${GZ}

# Language pair for this system.
export LANGS ?= ${SRC_LANG} ${TGT_LANG}

# Define the corpora.
export TRAIN_SET    ?= ${TRAIN_LM} ${TRAIN_TM}
export HELDOUT_SET  ?= ${TUNE_DECODE} ${TUNE_RESCORE} ${TRANSLATE_SET}
export CORPORA_SET  ?= ${TRAIN_SET} ${HELDOUT_SET}

# Define what type of phrase table we want to generate.
export PT_TYPE ?= ibm2_cpt

# Define what type of language model we want to generate.
export LM_TYPES ?= binlm

# Parameters for models/decode/Makefile
#export TEMPLATE_DIR    ?= ${ROOT_DIR}/models/decode
export PREFIX_DEV_COW  ?= ${TUNE_DECODE}
export PREFIX_DEV_RAT  ?= ${TUNE_RESCORE}

#
export DECODING_MODEL ?= canoe.ini.cow

# Defines the truecasing model filename.
export TRUECASING_MAP ?= ${TRAIN_LM}_${TGT_LANG}.map
export TRUECASING_LM  ?= ${TRAIN_LM}_${TGT_LANG}-kn-3g.binlm${GZ}

# Define the following variable if you want to create forward and backward phrase tables
#export BIDIRECTIONAL_SYSTEM = 1




# If we are lucky enough to have a cluster, we'll change the shell for certain
# commands and allow them to run on nodes.
ifdef USING_CLUSTER
FRAMEWORK_SHELL = run-parallel.sh
else
FRAMEWORK_SHELL = /bin/sh
endif

# Some commands shouldn't be run with the cluster shell, will use this one
# instead.
GUARD_SHELL = /bin/sh

########################################
# HELPERS
# How to compress a file.
%.gz: %
	cat $< | gzip > $@

