#!/usr/bin/make -f
# vim:noet:ts=3:nowrap

# $Id$

# @file Makefile.prepare.corpora
# @brief Commands to tokenized raw corpora.
#
# @author Samuel Larkin
#
# Technologies langagieres interactives / Interactive Language Technologiesm
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2010, Sa Majeste la Reine du Chef du Canada /
# Copyright 2010, Her Majesty in Right of Canada


include ../Makefile.params
-include Makefile.prepare.corpora.params

# What is the extension to the raw files.
RAWX ?= .raw

# Where to find the corpora.
CORPORA_DIR ?= /Where.to.find.your.corpora

# What are the corpora prefix we want to process.
CORPORA ?= ${TRAIN_LM} ${TRAIN_TM} ${TUNE_DECODE} ${TUNE_RESCORE} ${TEST_SET}

# Big corpora should be gzipped and will be processed with parallelize.pl to speed-up thing.
# BIG_CORPORA defines the prefixes like train or lm-train for example.
BIG_CORPORA ?= $(sort ${TRAIN_SET})  # Using sort to remove duplicates.

vpath %${RAWX} ${CORPORA_DIR}


# Change make's default shell to a distributed one, if working on a cluster.
SHELL = ${FRAMEWORK_SHELL}

.PHONY: all
all: tokenize


# Obviously used for debugging.
.PHONY: debug
debug: SHELL=${GUARD_SHELL}
debug:
	@echo "Corpora dir: ${CORPORA_DIR}"
	@echo "Corpora: ${CORPORA}"
	@echo "Big corpora: ${BIG_CORPORA}"


# What do we need to be tokenized?
# These will be the starting point for the portage.simple.framework.2.
.PHONY: tokenize
TOK += $(addsuffix _${SRC_LANG}${ALIGNX}, ${HELDOUT_SET})
TOK += $(addsuffix _${TGT_LANG}${ALIGNX}, ${HELDOUT_SET})
# Note that will want to compress the TRAIN_SET for space efficiency.
TOK += $(addsuffix _${SRC_LANG}${ALIGNX}${GZ}, ${TRAIN_TM})
TOK += $(addsuffix _${TGT_LANG}${ALIGNX}${GZ}, ${TRAIN_TM})
TOK += $(addsuffix _${TGT_LANG}${ALIGNX}${GZ}, ${TRAIN_LM})
tokenize: ${TOK}


########################################
# How to tokenize files.

# Tokenizes source corpora without sentence splitting.
%_${SRC_LANG}${ALIGNX}: %_${SRC_LANG}${RAWX}
	@${check_utf8}
	RP_PSUB_OPTS="-1" \
	utokenize.pl -noss -lang=${SRC_LANG} < $< > $@

# Tokenizes target corpora without sentence splitting.
%_${TGT_LANG}${ALIGNX}: %_${TGT_LANG}${RAWX}
	@${check_utf8}
	RP_PSUB_OPTS="-1" \
	utokenize.pl -noss -lang=${TGT_LANG} < $< > $@

# HOW to handle big source language corpora.
$(addsuffix _${SRC_LANG}${ALIGNX}${GZ}, ${BIG_CORPORA}): %_${SRC_LANG}${ALIGNX}${GZ}: %_${SRC_LANG}${RAWX}${GZ}
	RP_PSUB_OPTS="-1" \
	parallelize.pl -psub -1 -n ${PARALLELISM_LEVEL_CORPORA} "utokenize.pl -noss -lang=${SRC_LANG} < $< > $@"

# HOW to handle big target language corpora.
$(addsuffix _${TGT_LANG}${ALIGNX}${GZ}, ${BIG_CORPORA}): %_${TGT_LANG}${ALIGNX}${GZ}: %_${TGT_LANG}${RAWX}${GZ}
	RP_PSUB_OPTS="-1" \
	parallelize.pl -psub -1 -n ${PARALLELISM_LEVEL_CORPORA} "utokenize.pl -noss -lang=${TGT_LANG} < $< > $@"



